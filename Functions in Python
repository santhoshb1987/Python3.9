import os
import time
import platform
def mycode(cmd1,cmd2):
	print("Please wait. Cleaning the screen....")
	time.sleep(2)
	os.system(cmd1)
	print("Please wait finding the list of dir and files")
	time.sleep(2)
	os.system(cmd2)
if platform.system()=="Windows":
	mycode("cls","dir")
else:
	mycode('clear','ls -lrt')


---------------------------------------------
def display():
	print("Welcome to functions concept")
	print("Simple way to define your function")
	return None

display()


print(len("hi"))
x=40
print(id(x))


#Rules to define function name:
#Function name should have only a-z,A-Z,0-9, _
#Function shuold not start with number but can it be start with _
#Dont include any space.
#Function must be define befor calling it


x=(5,6)
print(len(x))

print(min(x))
print(max(x))



x="5"
print(int(x))

------------------------------------------------
def welcome_msg():
	print("Welcome to Python Scripting")
	print("Python is easy to learn")
	return None
def known_concepts():
	print("Now we are good with bascis")
	print("We are about to start functions concepts in python")
	return None
def learning_concepts():
	print("Function are very easy in python")
	print("Now we are writing simple functions")
	return None
welcome_msg()
known_concepts()
learning_concepts()


--------------------------------------------------


def myfunction1():
	x=60  #This is local variable
	print("Welcome to functions")
	print("x value from fun1: ",x)
	#myfunction2()
	return None


def myfunction2(y):  #Parameter
	print("Thank you!!")
	print("x value from fun2: ",y)
	return None

def main():
	#global x
	x=10 
	myfunction1()
	myfunction2(x)  #Argument
	return None


main()


---------------------------------------------------

'''
def get_result(value):  #parameters/positional arguments
	result=value+10
	print(f'Your result is: {result}')
	return None
def main():
	#global num
	num=eval(input("Enter your number: "))
	get_result(num)  #Arguments
	return None

main()
'''
def get_add(p,q):
	aresult=p+q
	print(f'The addition of {p} and {q} is: {aresult}')
	return None
def get_sub(m,n):
	sresult=m-n
	print(f'The sub of {m} and {n} is: {sresult}')
	return None

def main():
	a=eval(input("Enter your first num: "))
	b=eval(input("Enter your second num: "))
	get_add(a,b)
	get_sub(a,b)
	#x=50
	#get_sub(19,x)
	return None

main()


----------------------------------------------------


'''
def get_result(value):  #parameters/positional arguments
	result=value+10
	print(f'Your result is: {result}')
	return None
def main():
	#global num
	num=eval(input("Enter your number: "))
	get_result(num)  #Arguments
	return None

main()
'''
def get_add(p,q):
	aresult=p+q
	print(f'The addition of {p} and {q} is: {aresult}')
	return None
def get_sub(m,n):
	sresult=m-n
	print(f'The sub of {m} and {n} is: {sresult}')
	return None

def main():
	a=eval(input("Enter your first num: "))
	b=eval(input("Enter your second num: "))
	get_add(a,b)
	get_sub(a,b)
	#x=50
	#get_sub(19,x)
	return None

main()

---------------------------------------------------

'''
def get_addition(a,b):
	result=a+b
	#print(f"The addition of {a} and {b} is: {result}")
	return result
def main():
	a=eval(input("Enter your first number: "))
	b=eval(input("Enter your second number :"))
	result=get_addition(a,b)
	print(f"The addition of {a} and {b} is: {result}")
	return None
main()
'''

def multiply_num_10(value):
	#result=value*10
	#return result
	return value*10


def main():
	num=eval(input("Enter your number: "))
	result=multiply_num_10(num)
	print("The result is: ",result)




main()


----------------------------------------------------


'''
def display(a=1):
	print("The value of a is: ",a)
	return None

display(4)
display(5)
display()
'''

'''
def add_numbers(a,b=0):
	result=a+b
	print("The result is: ",result)
	return None
add_numbers(4,5)
add_numbers(5)
add_numbers(7)
'''

def working_on_some(user="root"):
	print(f"working with {user}")
	return None

working_on_some("weblogic_admin")


-----------------------------------------------------

def display(a,b):
	print(f'a={a}')
	return None

display(3,4)
display(a=3,b=4)
display(b=4,a=3)


------------------------------------------------

def display(*arg):
	for each in arg:
		print(type(each))
	return None
#display()
#display(4)
display(4,5,67)
print('-------------')
display("hi",4.65)

-------------------------------------------------

def display(p,**karg):
	print(p)
	print(karg)
	return None
#display(4,5)
#display(b=5,a=4)
#display(a=4,b=5,c=6)
display(56,x=5,y="Hi",z=6.7,user="root")


--------------------------------------------------


#!/usr/local/bin/python3
import os
'''
req_path=input("Enter path to change working dir: ")
print("The current working dir is: ",os.getcwd())
try:
  os.chdir(req_path)
  print("Now your new working dir is: ",os.getcwd())
except FileNotFoundError:
  print("Given path is not a valid path. So cant change working directory")
except NotADirectoryError:
  print("Given path is a file path. So cant change working directory")
except PermissionError:
  print("Sorry you dont have access for the given path. So cant chagne working directory")
except Exception as e:
  print(e)
'''

def main():
  req_path=input("Enter path to change working dir: ")
  print("The current working dir is: ",os.getcwd())
  try:
    os.chdir(req_path)
    print("Now your new working dir is: ",os.getcwd())
  except FileNotFoundError:
    print("Given path is not a valid path. So cant change working directory")
  except NotADirectoryError:
    print("Given path is a file path. So cant change working directory")
  except PermissionError:
    print("Sorry you dont have access for the given path. So cant chagne working directory")
  except Exception as e:
    print(e)
  return None


if __name__=="__main__":
   main()

-------------------------------------------

Using __name__ variable

__name__ ?

script1.py
----------

def add(a,b):
	print(f"The addition of {a} and {b} is {a+b}")
	return None

def sub(ab,b:
	print(f"The sub of {a} and {b} is {a-b}")
	return None

def main():
	x=7
	b=9
	add(x,y)
	sub(x,y)
	return None

if __name__=="__main__":
	main()

script2.py
----------

import script1

def mul(a,b):
	print(f"The mult of {a} and {b} is {a*b}")
	return None

def main():
	x=10
	y=20
	script1.add(x,y)
        return None

if __name__=="__main__":
	main()

*** When ever you call script1 from script2 whithout __name__ then it will print add and sub of script1

*** __name__ returns __main__ in the same script

*** but if you call script1 in script2 then __name__ will return "script1"




